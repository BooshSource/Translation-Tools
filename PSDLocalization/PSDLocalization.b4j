AppType=JavaFX
Build1=Default,b4j.example
File1=export.bjl
File2=import.bjl
File3=main.bjl
File4=OCR.bjl
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=Default Group
Library1=jcore
Library10=encryption
Library11=b4xcollections
Library2=jfx
Library3=jshell
Library4=jpoi
Library5=xui views
Library6=jokhttputils2
Library7=jstringutils
Library8=json
Library9=byteconverter
Module1=OCR
Module2=Utils
NumberOfFiles=4
NumberOfLibraries=11
NumberOfModules=2
Version=7.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private Label1 As Label
	Private currentPath As String
	Private TextArea1 As TextArea
	Private CheckBox1 As CheckBox
	Private RefillLabel As Label
	Private TabPane1 As TabPane
	Private handleNontextCheckBox As CheckBox
	Private ComboBox1 As ComboBox
	Private EngineComboBox As ComboBox
	Private XLSXLabel As Label
	Private LayersListView As ListView
	Private langmap As Map
	Private FontLabel As Label
	Private FontSizeSpinner As Spinner
	Private HeightSpinner As Spinner
	Private WidthSpinner As Spinner
	Private ImagesListView As ListView
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show

	langmap.Initialize
	Dim langlist As List
	langlist=File.ReadList(File.DirApp,"lang.conf")
	For i=0 To langlist.Size-1 Step 2
		langmap.Put(langlist.Get(i),langlist.Get(i+1))
	Next
	initUI
	OCR.checkTessearct
End Sub

Sub initUI
	TabPane1.LoadLayout("export","导出文字")
	TabPane1.LoadLayout("OCR","OCR验证")
	TabPane1.LoadLayout("import","文字回填")
	Label1.Text="先选择psd文件夹，再点导出"
	For Each item As String In langmap.Keys
		ComboBox1.Items.Add(item)
	Next
	ComboBox1.SelectedIndex=0
	EngineComboBox.Items.Add("tesseract")
	EngineComboBox.Items.Add("baidu")
	EngineComboBox.Items.Add("baidu_network")
	EngineComboBox.SelectedIndex=0
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub ExportButton_MouseClicked (EventData As MouseEvent)
	If File.Exists(Label1.Text,"") Then
		export(Label1.Text)
	Else
		fx.Msgbox(MainForm,"请选择目录","")
	End If
End Sub

Sub ChooseButton_MouseClicked (EventData As MouseEvent)
	ImagesListView.Items.Clear
	Dim dc As DirectoryChooser
	dc.Initialize
	Dim psdDir As String=dc.Show(MainForm)
	Dim imgMap As Map
	imgMap.Initialize
	If File.Exists(psdDir,"") Then
		Label1.Text=psdDir
		currentPath=psdDir
		importDir(psdDir,imgMap)
		Dim keys As List
		keys.Initialize
		For Each key As String In imgMap.Keys
			keys.Add(key)
		Next
		ImagesListView.Items.AddAll(Utils.sortedList(keys))
	End If
	
End Sub

Sub importDir(dirPath As String,imgMap As Map)
	Dim files As List=File.ListFiles(dirPath)
	For Each filename As String In files
		If ImagesListView.Items.IndexOf(filename)<>-1 Then
			Continue
		End If
		If File.IsDirectory(dirPath,filename) Then
			importDir(File.Combine(dirPath,filename),imgMap)
		End If
		Dim lowerCaseName As String=filename.ToLowerCase
		If lowerCaseName.EndsWith(".psd") Then
			If currentPath<>dirPath Then
				filename=File.Combine(dirPath.Replace(currentPath,""),filename)
			End If
			imgMap.Put(filename,"")
		End If
	Next
End Sub

Sub exportFilesToTxt(path As String,files As List)
	Dim sb As StringBuilder
	sb.Initialize
	For Each filename As String In files
		sb.Append(filename).Append(CRLF)
	Next
	File.WriteString(path,"",sb.ToString)
End Sub

Sub export(psdDir As String)
	Label1.Text="导出中。。。"
	exportFilesToTxt(File.Combine(currentPath,"out.txt"),ImagesListView.Items)
	Dim sh As Shell
	sh.Initialize("sh",File.Combine(File.DirApp,"export.exe"),Null)
	sh.WorkingDirectory=psdDir
	sh.Run(-1)
	wait for sh_ProcessCompleted (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
	If Success Then
		merge(psdDir)
	End If
End Sub

Sub merge(psdDir As String)
	Dim filterWords As List
	filterWords.Initialize
	For Each word As String In Regex.Split(CRLF,TextArea1.Text)
		If word.Trim<>"" Then
			filterWords.Add(word)
		End If
	Next
	Dim wb As PoiWorkbook
	wb.InitializeNew(True)
	Dim sheet1 As PoiSheet = wb.AddSheet("Sheet1",0)
	Dim index As Int=1
	
	Dim row As PoiRow = sheet1.CreateRow(0)
	row.CreateCellString(0,"filename")
	row.CreateCellString(1,"layerName")
	row.CreateCellString(2,"source")
	row.CreateCellString(3,"target")
	row.CreateCellString(4,"note")
	row.CreateCellString(5,"OCR")
	row.CreateCellString(6,"X")
	row.CreateCellString(7,"Y")
	row.CreateCellString(8,"width")
	row.CreateCellString(9,"height")

	For Each filename As String In ImagesListView.Items
		Dim fullPathWithoutExtension As String = File.Combine(currentPath,Utils.GetFilenameWithoutExtension(filename))
        Log(fullPathWithoutExtension)
		Dim txtName As String= fullPathWithoutExtension&".txt"
		If File.Exists(txtName,"") Then
			Dim lines As List = File.ReadList(txtName,"")
			For Each line As String In lines
				Log(line)
				Dim items As List
				items.Initialize
				items.AddAll(Regex.Split("	",line))
				Try
					Dim X,Y,Width,Height,layername,note As String
					X=items.Get(0)
					Y=items.Get(1)
					Width=items.Get(2)
					Height=items.Get(3)
					layername=items.Get(4)
					note=items.Get(5) ' note or contents
				Catch
					Log(LastException)
					Continue
				End Try

				Dim isNonText As Boolean=False
				Dim source As String
				If note="non-text" Then
					isNonText=True
					source=layername
				Else
					source=note
				End If
				Dim shouldBeFiltered As Boolean=False
				For Each filterWord As String In filterWords
					Log(filterWord)
					Log(source.StartsWith(filterWord))
					If source.StartsWith(filterWord) Then
						shouldBeFiltered=True
						Exit
					End If
				Next
				If shouldBeFiltered=False Then
					Dim row As PoiRow = sheet1.CreateRow(index)
					row.CreateCellString(0,filename)
					row.CreateCellString(1,layername)
					
					If CheckBox1.Checked Then
						source=source.Replace(" ","")
					End If
					row.CreateCellString(2,source)
					If isNonText Then
						row.CreateCellString(4,"non-text")
					End If
					row.CreateCellString(6,X)
					row.CreateCellString(7,Y)
					row.CreateCellString(8,Width)
					row.CreateCellString(9,Height)
					index=index+1
				End If
			Next
		End If
	Next
	Try
		wb.Save(psdDir,"out.xlsx")
	Catch
		Log(LastException)
		Dim filename As String= DateTime.Now&".xlsx"
		wb.Save(psdDir,filename)
		fx.Msgbox(MainForm,"out.xlsx文件已打开，文件保存为"&filename,"")
	End Try

	openFolder(currentPath)
	Label1.Text="导出完成"
End Sub

Sub ImportButton_MouseClicked (EventData As MouseEvent)
	Dim fc As FileChooser
	fc.Initialize
	Dim path As String = fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		Try
			For Each line As String In File.ReadList(path,"")
				TextArea1.Text=TextArea1.Text&CRLF&line
			Next
		Catch
			Log(LastException)
			fx.Msgbox(MainForm,"导入失败","")
		End Try
	End If
	
End Sub

Sub openFolder(path As String)
	Select fx.Msgbox2(MainForm,"操作成功，是否打开目录？","","好","取消","",fx.MSGBOX_CONFIRMATION)
		Case fx.DialogResponse.POSITIVE
			fx.ShowExternalDocument(File.GetUri(path,""))
	End Select
End Sub

Sub refill(psdDir As String)
	RefillLabel.Text="导入中。。。"
	Dim fontsize As String=FontSizeSpinner.Value
	Dim textWidth As String=WidthSpinner.Value
	Dim textHeight As String=HeightSpinner.Value
	Dim sh As Shell
	sh.Initialize("sh",File.Combine(File.DirApp,"import.exe"),Array As String(fontsize,textWidth,textHeight))
	sh.WorkingDirectory=psdDir
	sh.Run(-1)
	wait for sh_ProcessCompleted (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
	If Success Then
		openFolder(currentPath)
	End If
End Sub

Sub RefillButton_MouseClicked (EventData As MouseEvent)
	If File.Exists(currentPath,"翻译记忆.txt") Then
		refill(currentPath)
	End If
End Sub

Sub ChooseXLSXButton_MouseClicked (EventData As MouseEvent)
	If File.Exists(currentPath,"") Then
		Dim filenames As B4XSet
		filenames.Initialize
		Dim sb As StringBuilder
		sb.Initialize
		Dim fc As FileChooser
		fc.Initialize
		fc.SetExtensionFilter("XLSX files",Array As String("*.xlsx"))
		Dim path As String=fc.ShowOpen(MainForm)
		If File.Exists(path,"") Then
			Try
				Dim wb As PoiWorkbook
				wb.InitializeExisting(path,"","")
			Catch
				Log(LastException)
				fx.Msgbox(MainForm,"请先关闭xlsx文件","")
				Return
			End Try
			Dim sheet1 As PoiSheet
			sheet1=wb.GetSheet(0)
			For Each row As PoiRow In sheet1.Rows
				Try
					If row.RowNumber=0 Then
						Continue
					End If
					Dim filename,layername,target,note As String
					filename=row.GetCell(0).Value
					filenames.Add(filename)
					layername=row.GetCell(1).Value
					target=row.GetCell(3).Value
					target=target.Replace(CRLF," ")
					If row.GetCell(4).IsInitialized Then
						note=row.GetCell(4).Value
						If handleNontextCheckBox.Checked=False And note="non-text" Then
							Continue
						End If
					End If
					sb.Append(layername).Append("	").Append(target).Append(CRLF)
				Catch
					Log(LastException)
				End Try
			Next
		End If
		exportFilesToTxt(File.Combine(currentPath,"out.txt"),filenames.AsList)
		File.WriteString(currentPath,"翻译记忆.txt",sb.ToString)
		RefillLabel.Text="xlsx处理成功"
		wait for (getFontsize(currentPath,filenames.AsList.Get(0))) complete (size As Int)
		FontSizeSpinner.Value=size
	End If
End Sub

Sub ChooseImDirButton_MouseClicked (EventData As MouseEvent)
	Dim dc As DirectoryChooser
	dc.Initialize
	Dim psdDir As String=dc.Show(MainForm)
	If File.Exists(psdDir,"") Then
		RefillLabel.Text=psdDir
		currentPath=psdDir
	End If

End Sub

Sub OCRButton_MouseClicked (EventData As MouseEvent)
	Log(XLSXLabel.Text)
	Try
		Dim wb As PoiWorkbook
		wb.InitializeExisting(XLSXLabel.Text,"","")
	Catch
		Log(LastException)
		fx.Msgbox(MainForm,"请先关闭xlsx文件","")
		Return
	End Try

	Dim sheet1 As PoiSheet
	sheet1=wb.GetSheet(0)
	For Each row As PoiRow In sheet1.Rows
		If row.RowNumber=0 Then
			row.CreateCellString(5,"OCR")
			Continue
		End If
		If row.GetCell(4).IsInitialized Then
			If row.GetCell(4).Value="non-text" Then
				wait for (ExportJPG(row.GetCell(0).Value,row.GetCell(1).Value)) Complete (result As String)
				Log("OCR:"& result)
				If result.Trim<>"" Then
					LayersListView.Items.Add(row.GetCell(1).Value)
					row.CreateCellString(5,result) 
				End If
			Else
				row.CreateCellString(5,row.GetCell(2).Value)
			End If
		Else
			row.CreateCellString(5,row.GetCell(2).Value)
		End If
	Next
	wb.Save(XLSXLabel.Text,"")
	openFolder(File.GetFileParent(XLSXLabel.Text))
End Sub

Sub ExportJPG(filename As String,layername As String) As ResumableSub
	Dim sh As Shell
	Log(filename)
	Log(File.GetFileParent(XLSXLabel.Text))
	sh.Initialize("sh","layer2img",Array(filename,layername))
	sh.WorkingDirectory=File.GetFileParent(XLSXLabel.Text)
	sh.Run(-1)
	wait for sh_ProcessCompleted (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
	Log(Success)
	Log(ExitCode)
	If Success And ExitCode=0 Then
		wait for (OCROneLayer) Complete (result As String)
		Return result
	Else
		Return ""
	End If
End Sub

Sub OCROneLayer As ResumableSub
	Dim img As Image
	img.Initialize(File.GetFileParent(XLSXLabel.Text),"out.jpg")
	'wait for (OCR.baidu(img,"network","chi_sim")) complete (result As Map)
	Dim lang As String=langmap.Get(ComboBox1.Items.Get(ComboBox1.SelectedIndex))
	wait for (OCR.GetText(img,lang,EngineComboBox.Items.Get(EngineComboBox.SelectedIndex))) complete (result As String)
	Return result
End Sub

Sub ChooseXLSX4OCRButton_MouseClicked (EventData As MouseEvent)
	Dim fc As FileChooser
	fc.Initialize
	fc.SetExtensionFilter("XLSX files",Array As String("*.xlsx"))
	Dim path As String=fc.ShowOpen(MainForm)
	XLSXLabel.Text=path
End Sub

Sub ChooseFontButton_MouseClicked (EventData As MouseEvent)
	fx.Msgbox(MainForm,"请打开PS，新建一个图像并新建一个文本框。程序会读取该文本框内文本的字体，并在漫画目录生成font.txt这一文件存储字体信息。完成后再点确认。","")
	Try
		Dim sh As Shell
		sh.Initialize("sh","readFont",Null)
		sh.WorkingDirectory=currentPath
		sh.Run(-1)
		wait for sh_ProcessCompleted (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
		Log(Success)
		Log(ExitCode)
		FontLabel.Text=File.ReadString(currentPath,"font.txt")
	Catch
		Log(LastException)
	End Try

End Sub

Sub getRes(psdDir As String,filename As String) As ResumableSub
	Dim resolution As Int=72
	Dim sh As Shell
	sh.Initialize("sh",File.Combine(File.DirApp,"readRes.exe"),Array As String(filename))
	sh.WorkingDirectory=psdDir
	sh.Run(-1)
	wait for sh_ProcessCompleted (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
	If Success Then
		If File.Exists(psdDir,"res.txt") Then
			Try
				resolution=File.ReadString(psdDir,"res.txt")
			Catch
				Log(LastException)
			End Try

		End If
	End If
	Return resolution
End Sub

Sub getFontsize(psdDir As String,filename As String) As ResumableSub
	wait for (getRes(psdDir,filename)) Complete (resolution As Int)
	Dim suitableFontSize As Int = 48/(resolution/72)
	Return suitableFontSize
End Sub


Sub findPSD(dirPath As String)
	Dim files As List=File.ListFiles(dirPath)
	For Each filename As String In files
		If ImagesListView.Items.IndexOf(filename)<>-1 Then
			Continue
		End If
		If File.IsDirectory(dirPath,filename) Then
			findPSD(File.Combine(dirPath,filename))
		End If
		Dim lowerCaseName As String=filename.ToLowerCase
		If lowerCaseName.EndsWith(".psd") Then
			
		End If
	Next
End Sub
